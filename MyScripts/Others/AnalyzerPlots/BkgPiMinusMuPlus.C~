// Variables for sigma vs mass fit

Double_t Par[6] = {0., 0., 0., 0., 0., 0.};
Double_t minSigma = 0.;

void Save(TString path, TCanvas *c, TH1D* h, TString x, Double_t labelSize, Double_t titleSize) {

  TString name = h->GetName();
  
  h->Draw();
  h->GetXaxis()->SetTitle(x);
  h->SetFillColor(38);
  h->SetTitleSize(titleSize, "t");
  h->GetXaxis()->SetTitleSize(labelSize);
  h->GetXaxis()->SetLabelSize(labelSize);
  h->GetYaxis()->SetTitleSize(labelSize);
  h->GetYaxis()->SetLabelSize(labelSize);
  h->GetXaxis()->SetTitleOffset(1.4);
  h->GetYaxis()->SetTitleOffset(1.4);

  if (name.Contains("TimeSR") || name.Contains("ZSR"))
    gPad->SetLogy();
  else
    gPad->SetLogy(0);
  
  gStyle->SetOptStat(0);
  gPad->Update();
  c->SaveAs(path + h->GetName() + ".pdf");
  c->SaveAs(path + h->GetName() + ".png");

  return;
}

void Save(TString path, TCanvas *c, TH2D* h, TString x, TString y, Double_t labelSize, Double_t titleSize) {

  TString name = h->GetName();
  
  if (h->GetEntries() < 100)
    h->Draw("text");
  else
    h->Draw("colz");

  if (name.Contains("ZPrompt"))
    gPad->SetLogy();
  else
    gPad->SetLogy(0);
      
  h->GetXaxis()->SetTitle(x);
  h->GetYaxis()->SetTitle(y);
  h->SetTitleSize(titleSize, "t");
  h->GetXaxis()->SetTitleSize(labelSize);
  h->GetYaxis()->SetTitleSize(labelSize);
  h->GetXaxis()->SetLabelSize(labelSize);
  h->GetYaxis()->SetLabelSize(labelSize);
  h->GetXaxis()->SetTitleOffset(1.4);
  h->GetYaxis()->SetTitleOffset(1.4);
  gStyle->SetOptStat(0);
  gPad->Update();
  c->SaveAs(path + h->GetName() + ".pdf");
  c->SaveAs(path + h->GetName() + ".png");

  return;
}

void Save(TString path, TCanvas *c, TGraph* g, TString name, TString x, TString y, Double_t labelSize, Double_t titleSize) {

  if (name.Contains("gMassMC"))
    g->Draw("AP*");
  else
    g->Draw("APL");
  
  g->GetXaxis()->SetTitleOffset(1.4);
  g->GetYaxis()->SetTitleOffset(1.5);
  g->GetXaxis()->SetTitle(x);
  g->GetYaxis()->SetTitle(y);
  g->GetXaxis()->SetTitleSize(labelSize);
  g->GetYaxis()->SetTitleSize(labelSize);
  g->GetXaxis()->SetLabelSize(labelSize);
  g->GetYaxis()->SetLabelSize(labelSize);
  gStyle->SetOptStat(0);
  gPad->Update();
  c->SaveAs(path + name + ".pdf");
  c->SaveAs(path + name + ".png");

  return;
}

// Scan on HNL mass for expected number of background events, with window around mass hypothesis at 1 or 2 sigma (fixed sigma)

TGraph* WindowScanFixedSigma(TH1D* h, Double_t massSigma, Double_t sigmaStep) {

  Int_t firstBin = h->FindFirstBinAbove(0.,1);
  Double_t firstBinValue = h->GetBinCenter(firstBin)-h->GetBinWidth(firstBin)/2.;
  Int_t lastBin = h->FindLastBinAbove(0.,1);
  Double_t lastBinValue = h->GetBinCenter(lastBin)-h->GetBinWidth(lastBin)/2.;
  Int_t counter = 0;
  TGraph *g = new TGraph();
  
  for (Double_t massHyp = firstBinValue-2.*sigmaStep*massSigma; massHyp <= lastBinValue+2.*sigmaStep*massSigma; massHyp += sigmaStep*massSigma) {
    Double_t nBkg = 0.;
    for (Double_t i = massHyp-massSigma; i <= massHyp+massSigma; i += massSigma) {
      nBkg += h->GetBinContent(h->FindBin(i+massSigma*0.000001));
    }
    g->SetPoint(counter, massHyp, nBkg);
    counter++;
  }
  
  return g;	 
}

// Scan on HNL mass for expected number of background events, with window around mass hypothesis at 1 or 2 sigma (non-fixed sigma: each MC mass hypothesis is fitted, sigma is plotted vs mass and fitted. Fit parameters are used to compute sigma for each mass hypothesis in this scan)

TGraph* WindowScanNoFixedSigma(TH1D* h, Int_t howManySigmas) {

  Int_t firstBin = h->FindFirstBinAbove(0.,1);
  Double_t firstBinValue = h->GetBinCenter(firstBin)-h->GetBinWidth(firstBin)/2.;
  Int_t lastBin = h->FindLastBinAbove(0.,1);
  Double_t lastBinValue = h->GetBinCenter(lastBin)-h->GetBinWidth(lastBin)/2.;
  Int_t counter = 0;
  Double_t massMin = 0.2;
  Double_t massMax = 2.;
  TGraph *res = new TGraph();

  for (Double_t massHyp = massMin-minSigma; massHyp <= massMax+minSigma; massHyp += minSigma) {
    Double_t sigma = Par[5]*TMath::Power(massHyp, 5.) + Par[4]*TMath::Power(massHyp, 4.) + Par[3]*TMath::Power(massHyp, 3.) + Par[2]*TMath::Power(massHyp, 2.) + Par[1]*TMath::Power(massHyp, 1.) + Par[0];
    TAxis *axis = h->GetXaxis();
    Int_t bmin = axis->FindBin(massHyp-howManySigmas*sigma);
    Int_t bmax = axis->FindBin(massHyp+howManySigmas*sigma);
    Double_t nBkg = h->Integral(bmin, bmax);
    nBkg -= h->GetBinContent(bmin)*(massHyp-howManySigmas*sigma-axis->GetBinLowEdge(bmin))/axis->GetBinWidth(bmin);
    nBkg -= h->GetBinContent(bmax)*(axis->GetBinUpEdge(bmax)-(massHyp+howManySigmas*sigma))/axis->GetBinWidth(bmax);
    res->SetPoint(counter, massHyp, nBkg);
    counter++;
  }

  return res;
}
/*

// Compute CDA between two lines

void ComputeCDA(TVector3 p1, TVector3 p2, TVector3 dir1, TVector3 dir2, TVector3 &vertex, Double_t &CDA) {

Double_t A = dir1*dir1;
Double_t B = dir2*dir2;
Double_t C = dir1*dir2;
Double_t det = C*C - A*B;
if (det == 0.) { // the two lines are parallel
vertex.SetXYZ(0., 0., 0.);
CDA = -999;
}
else {
TVector3 R12 = p1 - p2;
double D = R12*dir1;
double E = R12*dir2;
double T1 = (B*D - C*E)/det;
double T2 = (C*D - A*E)/det;
TVector3 Q1 = p1 + T1*dir1;
TVector3 Q2 = p2 + T2*dir2;
vertex = 0.5*(Q1+Q2);
CDA = (Q1-Q2).Mag();
}
}
*/

// Sum graphs for total expected bkg

void SumGraphs(TGraph* g1, TGraph* g2, TGraph &g) {

  if (g1->GetN() != g2->GetN()) {
    cout<<g1->GetName()<<" and "<<g2->GetName()<<" do not have the same number of points!"<<endl;
    _exit(1);
  }
  
  for (Int_t i = 0; i < g1->GetN(); i++) {
    Double_t X = 0.;
    Double_t Y = 0.;
    Double_t Ytot = 0.;
    
    g1->GetPoint(i, X, Y);
    Ytot += Y;
    g2->GetPoint(i, X, Y);
    Ytot += Y;
    g.SetPoint(i, X, Ytot);
    X = 0.;
    Y = 0.;
    Ytot = 0.;
  }

  return;
}

void Analyzer(TString dir, TString histo1, TString an, TCanvas* c, Double_t &counterCombPiMinusMuPlus, Double_t &counterParPiMinusMuPlus, Double_t &counterPromptSBZPiMinusMuPlus, Double_t &counterPromptFVZPiMinusMuPlus, Double_t &counterPromptSBNPiMinusMuPlus, Double_t &counterPromptFVNPiMinusMuPlus, TGraph* gBkg1SigmaBufferPiMinusMuPlus, TGraph* gBkg2SigmaBufferPiMinusMuPlus, TGraph* gBkg1SigmaTotPiMinusMuPlus, TGraph* gBkg2SigmaTotPiMinusMuPlus) {

  // Generic variables
  
  TString path = "";
  TString analyzer = "";
  Double_t labelSize = 0.05;
  Double_t titleSize = 0.07;  
  Double_t ZCDALineMax = 35000.;
  Double_t ZCDALineMin = -10000.;
  Double_t CDALineMax = 40.;
  Double_t Time1Max = -2.;
  Double_t Time1Min = -4.;
  Double_t Time2Max = 4.;
  Double_t Time2Min = 2.;
  Double_t CDAMax = 10.;
  Double_t ZVertexMax = 120000.;
  Double_t ZVertexMin = 100000.;
  Double_t BeamdistMax = 150.;
  Double_t BeamdistMin = 100.;
  Double_t ZEndFV = 180000.;
  Double_t xGTKMin = -50.;
  Double_t xGTKMax = 50.;
  Double_t yGTKMin = -30.;
  Double_t yGTKMax = 30.;
  Double_t massSigma = 0.0045; //GeV (fixed from 1 GeV mass);
  Double_t sigmaStep = 0.25; // step for mass window center
  Double_t massMin = 0.2;
  Double_t massMax = 2.;
  Double_t massStep = 0.01;
  Int_t nMassBins = (massMax - massMin)/massStep; //(massMax - massMin)/massSigma; why was it like this?
  Double_t binWidth = (massMax - massMin)/nMassBins;

  // Finding paths
  
  if (an.Contains("Pos"))
    analyzer = "Pos";
  else if (an.Contains("Neg"))
    analyzer = "Neg";
  else if (!an.Contains("Pos") && !an.Contains("Neg"))
    analyzer = "Zero";
  
  if (dir != "")
    path = dir;
  else {
    if (histo1.Contains("Data"))
      path = "/home/li/cernbox/PhD/TalksAndPapers/Notes/MCnote/images/Plots/Data/All/" + analyzer + "/";
    else
      path = "/home/li/cernbox/PhD/TalksAndPapers/Notes/MCnote/images/Plots/Data/MC/" + analyzer + "/";
  }
  
  TFile *f = TFile::Open(histo1);
  
  if (f == 0) {
    cout << "Error: cannot open " << histo1 << endl;
    _exit(1);
  }

  // Variables for tree
  
  TString treeName = an + "Passed";
  TTree* tree = (TTree*)f->Get(treeName);
  Double_t Weight;
  Double_t CHODTime1;
  Double_t CHODTime2;
  Double_t CDA;
  Double_t Zvertex;
  Double_t CDALine;
  Double_t ZCDALine;
  Double_t BeamlineDist;
  Double_t xSR;
  Double_t ySR;
  Double_t MuEoP;
  Double_t PiEoP;
  Double_t R;
  Double_t energyPi;
  Double_t energyMu;
  Double_t invMass;
  Double_t L0TPTime;
  Double_t xGTK31;
  Double_t yGTK31;
  Double_t xGTK32;
  Double_t yGTK32;
  Double_t BeamCDA1;
  Double_t BeamCDA2;
  Double_t EtotLKr;
  TVector3 *Mom1 = new TVector3();
  TVector3 *Mom2 = new TVector3();
  TVector3 *TotMom = new TVector3();
  TVector3 *Vertex = new TVector3();
  TVector3 *Pos1 = new TVector3();
  TVector3 *Pos2 = new TVector3();
  TVector3 *BeamVtx1 = new TVector3();
  TVector3 *BeamVtx2 = new TVector3();
  Bool_t Target;
  Bool_t K3pi;
  Bool_t autoPass;
  Int_t Assoc;
  Bool_t CHANTIAssoc1;
  Bool_t CHANTIAssoc2;
  Int_t Charge1;
  Int_t Charge2;
  Int_t nSec;
  Int_t nCHOD;
  Int_t nNewCHOD;
  Int_t nLKr;
  std::vector<Double_t> *RICHInfo1 = new std::vector<Double_t>;
  std::vector<Double_t> *RICHInfo2 = new std::vector<Double_t>;

  // Setting branches
  
  tree->SetBranchAddress("Weight", &Weight);
  tree->SetBranchAddress("CHODTime1", &CHODTime1);
  tree->SetBranchAddress("CHODTime2", &CHODTime2);
  tree->SetBranchAddress("CDA", &CDA);
  tree->SetBranchAddress("Zvertex", &Zvertex);
  tree->SetBranchAddress("CDALine", &CDALine);
  tree->SetBranchAddress("ZCDALine", &ZCDALine);
  tree->SetBranchAddress("BeamlineDist", &BeamlineDist);
  tree->SetBranchAddress("xSR", &xSR);
  tree->SetBranchAddress("ySR", &ySR);
  tree->SetBranchAddress("MuEoP", &MuEoP);
  tree->SetBranchAddress("PiEoP", &PiEoP);
  tree->SetBranchAddress("R", &R);
  tree->SetBranchAddress("energyPi", &energyPi);
  tree->SetBranchAddress("energyMu", &energyMu);
  tree->SetBranchAddress("invMass", &invMass);
  tree->SetBranchAddress("L0TPTime", &L0TPTime);
  tree->SetBranchAddress("xGTK31", &xGTK31);
  tree->SetBranchAddress("yGTK31", &yGTK31);
  tree->SetBranchAddress("xGTK32", &xGTK32);
  tree->SetBranchAddress("yGTK32", &yGTK32);
  tree->SetBranchAddress("BeamCDA1", &BeamCDA1);
  tree->SetBranchAddress("BeamCDA2", &BeamCDA2);
  tree->SetBranchAddress("EtotLKr", &EtotLKr);
  tree->SetBranchAddress("Mom1", &Mom1);
  tree->SetBranchAddress("Mom2", &Mom2);
  tree->SetBranchAddress("TotMom", &TotMom);
  tree->SetBranchAddress("Vertex", &Vertex);
  tree->SetBranchAddress("Pos1", &Pos1);
  tree->SetBranchAddress("Pos2", &Pos2);
  tree->SetBranchAddress("BeamVtx1", &BeamVtx1);
  tree->SetBranchAddress("BeamVtx2", &BeamVtx2);
  tree->SetBranchAddress("Target", &Target);
  tree->SetBranchAddress("K3pi", &K3pi);
  tree->SetBranchAddress("autoPass", &autoPass);
  tree->SetBranchAddress("Assoc", &Assoc);
  tree->SetBranchAddress("CHANTIAssoc1", &CHANTIAssoc1);
  tree->SetBranchAddress("CHANTIAssoc2", &CHANTIAssoc2);
  tree->SetBranchAddress("Charge1", &Charge1);
  tree->SetBranchAddress("Charge2", &Charge2);
  tree->SetBranchAddress("nSec", &nSec);
  tree->SetBranchAddress("nCHOD", &nCHOD);
  tree->SetBranchAddress("nNewCHOD", &nNewCHOD);
  tree->SetBranchAddress("nLKr", &nLKr);
  tree->SetBranchAddress("RICHInfo1", &RICHInfo1);
  tree->SetBranchAddress("RICHInfo2", &RICHInfo2);

  // Setting histograms - splitting analysis for pi+mu- and pi-mu+ cases

  // Combinatorial - pi-mu+
  
  TH1D *hTimeCombPiMinusMuPlus = new TH1D("hTimeComb", "Combinatorial background studies", 100, -15., 15.);

  TH1D *hInvMassCombPiMinusMuPlus = new TH1D("hInvMassComb", "Combinatorial background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TH1D *hInvMassCombKolmPiMinusMuPlus = new TH1D("hInvMassCombKolm", "Combinatorial background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TH1D *hInvMassCombSRPiMinusMuPlus = new TH1D("hInvMassCombSR", "Combinatorial background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TH1D *hInvMassCombSREnrichedPiMinusMuPlus = new TH1D("hInvMassCombSREnriched", "Enriched combinatorial background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  
  TH1D *hMomMuPosCombPiMinusMuPlus = new TH1D("hMomMuPosComb", "Combinatorial background studies", 100, 0., 200.);
  TH1D *hMomPiNegCombPiMinusMuPlus = new TH1D("hMomPiNegComb", "Combinatorial background studies", 100, 0., 200.);

  TH1D *hInvMassCombExtra3PiMinusMuPlus = new TH1D("hInvMassCombExtra3", "Combinatorial background studies - K^{+}#rightarrow #pi^{+}#pi^{+}#pi^{-} (lost+decayed)", 1000, -1., 4.); // K->3pi (pi lost +  pi->mu) (peak at m_pi^2)

  TH2D *hGTK3XYPiNegCombPiMinusMuPlus = new TH2D("hGTK3XYPiNegComb", "Combinatorial background studies", 100, -50., 50., 100, -50., 50.);
  TH2D *hGTK3XYMuPosCombPiMinusMuPlus = new TH2D("hGTK3XYMuPosComb", "Combinatorial background studies", 100, -50., 50., 100, -50., 50.);
  TH2D *hGTK3IDPiNegCombPiMinusMuPlus = new TH2D("hGTK3IDPiNegComb", "Combinatorial background studies", 6, -0.5, 5.5, 100, 0., 250.);
  TH2D *hGTK3IDMuPosCombPiMinusMuPlus = new TH2D("hGTK3IDMuPosComb", "Combinatorial background studies", 6, -0.5, 5.5, 100, 0., 250.);

  TH2D *hSRCombPiMinusMuPlus = new TH2D("hSRComb", "Signal region", 500, -50., 50., 50, 0., 0.1);
  TH2D *hSRFinalCombPiMinusMuPlus = new TH2D("hSRFinalComb", "Signal region", 500, -50., 50., 50, 0., 0.1);
  TH2D *hSRFinalCombEnrichedPiMinusMuPlus = new TH2D("hSRFinalCombEnriched", "Enriched signal region", 500, -50., 50., 50, 0., 0.1);

  TGraph *gBkg1SigmaCombPiMinusMuPlus = new TGraph();
  gBkg1SigmaCombPiMinusMuPlus->SetNameTitle("PiMinusMuPlus/gBkg1SigmaComb", "Combinatorial background studies");
  TGraph *gBkg2SigmaCombPiMinusMuPlus = new TGraph();
  gBkg2SigmaCombPiMinusMuPlus->SetNameTitle("PiMinusMuPlus/gBkg2SigmaComb", "Combinatorial background studies");

  // Prompt - pi-mu+

  TH1D *hZPromptPiMinusMuPlus = new TH1D("hZPrompt", "Prompt background studies", 500, 100., 190.);
  TH1D *hZPromptPPiMinusMuPlus = new TH1D("hZPromptP", "Prompt background studies", 500, 100., 190.);
  TH1D *hZPromptNPiMinusMuPlus = new TH1D("hZPromptN", "Prompt background studies", 500, 100., 190.);
  TH2D *hZTimePromptPiMinusMuPlus = new TH2D("hZTimePrompt", "Prompt background studies", 500, 100., 190., 100, -15., 15.);
  TH2D *hZTimePromptPPiMinusMuPlus = new TH2D("hZTimePromptP", "Prompt background studies", 500, 100., 190., 100, -15., 15.);
  TH2D *hZTimePromptNPiMinusMuPlus = new TH2D("hZTimePromptN", "Prompt background studies", 500, 100., 190., 100, -15., 15.);

  TH1D *hInvMassPromptPiMinusMuPlus = new TH1D("hInvMassPrompt", "Prompt background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TH1D *hInvMassPromptSRPiMinusMuPlus = new TH1D("hInvMassPromptSR", "Prompt background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TH1D *hInvMassPromptKolmPiMinusMuPlus = new TH1D("hInvMassPromptKolm", "Prompt background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  
  TH1D *hMomPiPromptPiMinusMuPlus = new TH1D("hMomPiPrompt", "Prompt background studies", 100, 0., 200.);
  TH1D *hMomMuPromptPiMinusMuPlus = new TH1D("hMomMuPrompt", "Prompt background studies", 100, 0., 200.);

  TH2D *hSRPromptPiMinusMuPlus = new TH2D("hSRPrompt", "Signal region", 500, -50., 50., 50, 0., 0.1);
  TH2D *hSRFinalPromptPiMinusMuPlus = new TH2D("hSRFinalPrompt", "Signal region", 500, -50., 50., 50, 0., 0.1);
  
  TGraph *gBkg1SigmaPromptPiMinusMuPlus = new TGraph();
  gBkg1SigmaPromptPiMinusMuPlus->SetNameTitle("PiMinusMuPlus/gBkg1SigmaPrompt", "Prompt background studies");
  TGraph *gBkg2SigmaPromptPiMinusMuPlus = new TGraph();
  gBkg2SigmaPromptPiMinusMuPlus->SetNameTitle("PiMinusMuPlus/gBkg2SigmaPrompt", "Prompt background studies");

  // Parasitic - pi-mu+

  TH1D *hDistParPiMinusMuPlus = new TH1D("hDistPar", "Parasitic background studies", 100, 0., 1000.);
  TH2D *hDistvsMassParPiMinusMuPlus = new TH2D("hDistvsMassPar", "Parasitic background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2., 50, 0., 1000.);
  
  TH1D *hInvMassParPiMinusMuPlus = new TH1D("hInvMassPar", "Parasitic background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TH1D *hInvMassParSRPiMinusMuPlus = new TH1D("hInvMassParSR", "Combinatorial background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TH1D *hInvMassParKolmPiMinusMuPlus = new TH1D("hInvMassParKolm", "Parasitic background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);

  TH1D *hMomPiParPiMinusMuPlus = new TH1D("hMomPiPar", "Parasitic background studies", 100, 0., 200.);
  TH1D *hMomMuParPiMinusMuPlus = new TH1D("hMomMuPar", "Parasitic background studies", 100, 0., 200.);

  TH2D *hSRParPiMinusMuPlus = new TH2D("hSRPar", "Signal region", 500, -50., 50., 50, 0., 0.1);
  TH2D *hSRFinalParPiMinusMuPlus = new TH2D("hSRFinalPar", "Signal region", 500, -50., 50., 50, 0., 0.1);
  TH2D *hDistvsMassParSRPiMinusMuPlus = new TH2D("hDistvsMassParSR", "Parasitic background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2., 50, 0., 1000.);

  TGraph *gBkg1SigmaParPiMinusMuPlus = new TGraph();
  gBkg1SigmaParPiMinusMuPlus->SetNameTitle("PiMinusMuPlus/gBkg1SigmaPar", "Parasitic background studies");
  TGraph *gBkg2SigmaParPiMinusMuPlus = new TGraph();
  gBkg2SigmaParPiMinusMuPlus->SetNameTitle("PiMinusMuPlus/gBkg2SigmaPar", "Parasitic background studies");

  // SR - pi-mu+

  TH1D *hDistSRPiMinusMuPlus = new TH1D("hDistSR", "Signal region background studies", 100, 0., 1000.);
  TH1D *hTimeSRPiMinusMuPlus = new TH1D("hTimeSR", "Signal region background studies", 100, -15., 15.);
  TH1D *hZSRPiMinusMuPlus = new TH1D("hZSR", "Signal region background studies", 500, 100., 190.);
  TH2D *hDistvsMassSRPiMinusMuPlus = new TH2D("hDistvsMassSR", "Signal region background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2., 50, 0., 1000.);

  TH1D *hInvMassSRPiMinusMuPlus = new TH1D("hInvMassSR", "Signal region background studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);

  TH1D *hMomPiSRPiMinusMuPlus = new TH1D("hMomPiSR", "Signal region background studies", 100, 0., 200.);
  TH1D *hMomMuSRPiMinusMuPlus = new TH1D("hMomMuSR", "Signal region background studies", 100, 0., 200.);

  TH2D *hSRSRPiMinusMuPlus = new TH2D("hSRSR", "Signal region", 500, -50., 50., 50, 0., 0.1);

  // MC only - pi-mu+

  TH1D *hInvMassMCPiMinusMuPlus = new TH1D("hInvMassMC", "MC studies", nMassBins+1, massMin-binWidth/2., massMax+binWidth/2.);
  TGraph *gMassMCPiMinusMuPlus = new TGraph();
  gMassMCPiMinusMuPlus->SetNameTitle("PiMinusMuPlus/gMassMC", "MC studies");

  // Scan tree

  Bool_t Zero = (!an.Contains("Pos") && !an.Contains("Neg"));
  Bool_t MC = (!histo1.Contains("2016") && !histo1.Contains("2017") && !histo1.Contains("2018") && !histo1.Contains("Data"));

  if (Zero && !MC)
    cout<<"**********Processing 0-charge events**********"<<endl;
  else if (an.Contains("Neg"))
    cout<<"**********Processing neg-charge events**********"<<endl;
  else if (Zero && MC)
    cout<<"**********Processing MC events**********"<<endl;

  for(Int_t i = 0; i < tree->GetEntries(); ++i) {
    tree->GetEntry(i);
    
    // Booleans for bkg studies
    
    Bool_t outsideSR = ((ZCDALine < ZCDALineMin || ZCDALine > ZCDALineMax || (ZCDALine >= ZCDALineMin && ZCDALine <= ZCDALineMax && CDALine > CDALineMax)));
    Bool_t CDAIn = (CDA < CDAMax);
    Bool_t CDAInEnriched = (CDA < 100.);
    Bool_t Comb = (((CHODTime1-CHODTime2 < Time1Max && CHODTime1-CHODTime2 > Time1Min) || (CHODTime1-CHODTime2 > Time2Min && CHODTime1-CHODTime2 < Time2Max)));
    Bool_t Prompt = (Zvertex >= ZVertexMin && Zvertex <= ZVertexMax);
    Bool_t SB = (Zvertex >= ZVertexMin && Zvertex <= ZVertexMax);
    Bool_t FV = (Zvertex >= ZVertexMax && Zvertex <= ZEndFV);
    Bool_t Par = (BeamlineDist >= BeamdistMin && BeamlineDist <= BeamdistMax);
    Bool_t PiMinusMuPlus = ((Assoc == 2 && Charge1 == -1) || (Assoc == 1 && Charge1 == 1));
    Bool_t Spike1 = ((Assoc == 1 && Charge1 == -1) && (Mom2->Mag()/1000. >= 70. && Mom2->Mag()/1000. <= 80.) && (xGTK32 >= xGTKMin && xGTK32 <= xGTKMax && yGTK32 >= yGTKMin && yGTK32 <= yGTKMax));
    Bool_t Spike2 = ((Assoc == 2 && Charge1 == 1) && (Mom1->Mag()/1000. >= 70. && Mom1->Mag()/1000. <= 80.) && (xGTK31 >= xGTKMin && xGTK31 <= xGTKMax && yGTK31 >= yGTKMin && yGTK31 <= yGTKMax));
    Bool_t noSpike = (!Spike1 && !Spike2);
    
    // MC studies
    
    if (MC && Zero && noSpike && PiMinusMuPlus) {
      hInvMassMCPiMinusMuPlus->Fill(invMass/1000.);
    }
    
    // 1 - Events outside blinded region
    
    if (outsideSR && Zero && noSpike && CDAIn && PiMinusMuPlus) { // all events outside blinded region
      hDistSRPiMinusMuPlus->Fill(BeamlineDist, Weight);
      hTimeSRPiMinusMuPlus->Fill(CHODTime1-CHODTime2, Weight);
      hZSRPiMinusMuPlus->Fill(Zvertex/1000., Weight);
      hInvMassSRPiMinusMuPlus->Fill(invMass/1000., Weight);
      hMomPiSRPiMinusMuPlus->Fill(Mom1->Mag()/1000., Weight);
      hMomMuSRPiMinusMuPlus->Fill(Mom2->Mag()/1000., Weight);
      hDistvsMassSRPiMinusMuPlus->Fill(invMass/1000., BeamlineDist, Weight);
      hSRSRPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
    }
    
    // 2 - Combinatorial
    
    if (Comb && Zero && CDAIn && PiMinusMuPlus) { // all events inside time sidebands
      
      // Study spike at 75 GeV
      
      if (Assoc == 1 && Charge1 == 1) { // mu+pi-
	hMomMuPosCombPiMinusMuPlus->Fill(Mom1->Mag()/1000., Weight);
	hMomPiNegCombPiMinusMuPlus->Fill(Mom2->Mag()/1000., Weight);
      }
      else if (Assoc == 2 && Charge1 == -1) { // pi-mu+
	hMomPiNegCombPiMinusMuPlus->Fill(Mom1->Mag()/1000., Weight);
	hMomMuPosCombPiMinusMuPlus->Fill(Mom2->Mag()/1000., Weight);
      }
      
      // Select momentum in [70-80] GeV to study spike
      
      if (Assoc == 1 && Charge1 == 1) { // mu+pi-
	if (Mom1->Mag()/1000. >= 70. && Mom1->Mag()/1000. <= 80.)
	  hGTK3XYMuPosCombPiMinusMuPlus->Fill(xGTK31, yGTK31);
	if (Mom2->Mag()/1000. >= 70. && Mom2->Mag()/1000. <= 80.)
	  hGTK3XYPiNegCombPiMinusMuPlus->Fill(xGTK32, yGTK32);
      }
      else if (Assoc == 2 && Charge1 == -1) { // pi-mu+
	if (Mom1->Mag()/1000. >= 70. && Mom1->Mag()/1000. <= 80.)
	  hGTK3XYPiNegCombPiMinusMuPlus->Fill(xGTK31, yGTK31);
	if (Mom2->Mag()/1000. >= 70. && Mom2->Mag()/1000. <= 80.)
	  hGTK3XYMuPosCombPiMinusMuPlus->Fill(xGTK32, yGTK32);
      }

      // Select momentum in [70-80] GeV and xy @ GTK3 to study spike
      
      if (RICHInfo1->at(0) == 99)
	RICHInfo1->at(0) = 5;

      if (RICHInfo2->at(0) == 99)
	RICHInfo2->at(0) = 5;

      if (Assoc == 1 && Charge1 == 1) { // mu+pi-
	if (Mom1->Mag()/1000. >= 70. && Mom1->Mag()/1000. <= 80.) {
	  if (xGTK31 >= xGTKMin && xGTK31 <= xGTKMax && yGTK31 >= yGTKMin && yGTK31 <= yGTKMax)
	    hGTK3IDMuPosCombPiMinusMuPlus->Fill(RICHInfo1->at(0), RICHInfo1->at(5));
	}
	if (Mom2->Mag()/1000. >= 70. && Mom2->Mag()/1000. <= 80.) {
	  if (xGTK32 >= xGTKMin && xGTK32 <= xGTKMax && yGTK32 >= yGTKMin && yGTK32 <= yGTKMax)	  
	    hGTK3IDPiNegCombPiMinusMuPlus->Fill(RICHInfo2->at(0), RICHInfo2->at(5));
	}
      }
      else if (Assoc == 2 && Charge1 == -1) { // pi-mu+
	if (Mom1->Mag()/1000. >= 70. && Mom1->Mag()/1000. <= 80.) {
	  if (xGTK31 >= xGTKMin && xGTK31 <= xGTKMax && yGTK31 >= yGTKMin && yGTK31 <= yGTKMax)
	    hGTK3IDPiNegCombPiMinusMuPlus->Fill(RICHInfo1->at(0), RICHInfo1->at(5));
	}
	if (Mom2->Mag()/1000. >= 70. && Mom2->Mag()/1000. <= 80.) {
	  if (xGTK32 >= xGTKMin && xGTK32 <= xGTKMax && yGTK32 >= yGTKMin && yGTK32 <= yGTKMax)	  
	    hGTK3IDMuPosCombPiMinusMuPlus->Fill(RICHInfo2->at(0), RICHInfo2->at(5));
	}
      }
    
      if (noSpike) { // all events inside time sidebands and no spike
	hTimeCombPiMinusMuPlus->Fill(CHODTime1-CHODTime2, Weight);
	hInvMassCombPiMinusMuPlus->Fill(invMass/1000., Weight);            
	hSRCombPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
      }
    
      // Extra combinatorial bkg
      
      if (outsideSR && noSpike && PiMinusMuPlus) { // all events outside blinded region
	/*
	  TVector3 vertex;
	  Double_t CDAcomp;
	  TVector3 momK(0., 0., 1.2E-3);
	  TVector3 posK(0., 0., 102000.);
	  //TVector3 mom1(Mom1.Px(), Mom1.Py(), Mom1.Pz());
	  //TVector3 mom2(Mom2.Px(), Mom2.Py(), Mom2.Pz());
	  //TVector3 pos1(Pos1.x(), Pos1.y(), Pos1.z());
	  //TVector3 pos2(Pos2.x(), Pos2.y(), Pos2.z());
	  ComputeCDA(*Pos1, posK, *Mom1, momK, vertex, CDAcomp);
	*/
	Double_t muMass = 105.66;
	Double_t piMass = 139.57;
	Double_t kMass = 493.68;
	Double_t kMom = 75000.;
	TVector3 *threeMomK = new TVector3(0., 0., 75000.);
	Double_t kE = TMath::Sqrt(kMom*kMom + kMass*kMass);
	Double_t piE = TMath::Sqrt(kMom*kMom + piMass*piMass);
	Double_t hypPiE1 = TMath::Sqrt(Mom1->Px()*Mom1->Px() + Mom1->Py()*Mom1->Py() + Mom1->Pz()*Mom1->Pz() + piMass*piMass);
	Double_t hypPiE2 = TMath::Sqrt(Mom2->Px()*Mom2->Px() + Mom2->Py()*Mom2->Py() + Mom2->Pz()*Mom2->Pz() + piMass*piMass);

	hInvMassCombExtra3PiMinusMuPlus->Fill(((kE + hypPiE1 + hypPiE2)*(kE + hypPiE1 + hypPiE2) - (*threeMomK + *Mom1 + *Mom2).Mag2())/1.E6);
      }
    }
    
    // 3 - Prompt
    
    if (Prompt && Zero && noSpike && CDAIn && PiMinusMuPlus) { // all events inside vertex sidebands
      hZPromptPiMinusMuPlus->Fill(Zvertex/1000., Weight);
      hZTimePromptPiMinusMuPlus->Fill(Zvertex/1000., CHODTime1-CHODTime2, Weight);
      hMomPiPromptPiMinusMuPlus->Fill(Mom1->Mag()/1000., Weight);
      hMomMuPromptPiMinusMuPlus->Fill(Mom2->Mag()/1000., Weight);
      hSRPromptPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
    }

    if (FV && an.Contains("Pos") && noSpike && CDAIn && PiMinusMuPlus)
      hInvMassPromptPiMinusMuPlus->Fill(invMass/1000., Weight);
	
    if (Prompt && an.Contains("Pos") && noSpike && CDAIn && PiMinusMuPlus) {
      hZPromptPPiMinusMuPlus->Fill(Zvertex/1000., Weight);
      hZTimePromptPPiMinusMuPlus->Fill(Zvertex/1000., CHODTime1-CHODTime2, Weight);
    }
    
    if (Prompt && an.Contains("Neg") && noSpike && CDAIn && PiMinusMuPlus) {
      hZPromptNPiMinusMuPlus->Fill(Zvertex/1000., Weight);
      hZTimePromptNPiMinusMuPlus->Fill(Zvertex/1000., CHODTime1-CHODTime2, Weight);
    }
    
    // 4 - Parasitic
    
    if (Par && Zero && noSpike && CDAIn && PiMinusMuPlus) { // all events inside beam distance sidebands
      hDistParPiMinusMuPlus->Fill(BeamlineDist, Weight);
      hInvMassParPiMinusMuPlus->Fill(invMass/1000., Weight);
      hMomPiParPiMinusMuPlus->Fill(Mom1->Mag()/1000., Weight);
      hMomMuParPiMinusMuPlus->Fill(Mom2->Mag()/1000., Weight);
      hDistvsMassParPiMinusMuPlus->Fill(invMass/1000., BeamlineDist, Weight);
      hSRParPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
    }
    
    // 5 - Events inside blinded region
    
    if (!outsideSR && noSpike && PiMinusMuPlus) { // all events inside blinded region...
      
      if (Comb && CDAInEnriched && Zero && !MC) { // ...and time sidebands (enriched sample)
	hSRFinalCombEnrichedPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
	hInvMassCombSREnrichedPiMinusMuPlus->Fill(invMass/1000., Weight);
      }
      if (Comb && Zero && !MC && CDAIn) { // ...and time sidebands (not enriched sample to study spike at 75 GeV)
	counterCombPiMinusMuPlus++;
	hSRFinalCombPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
	hInvMassCombSRPiMinusMuPlus->Fill(invMass/1000., Weight);
      }
      if (Par && Zero && !MC && CDAIn) { // ...and beam distance sidebands
	hSRFinalParPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
	counterParPiMinusMuPlus++;
	hInvMassParSRPiMinusMuPlus->Fill(invMass/1000., Weight);
	hDistvsMassParSRPiMinusMuPlus->Fill(invMass/1000., BeamlineDist, Weight);
      }
      if (Prompt && Zero && !MC && CDAIn) { // ...and vertex sidebands (0-charge)
	hSRFinalPromptPiMinusMuPlus->Fill(ZCDALine/1000., CDALine/1000., Weight);
	counterPromptSBZPiMinusMuPlus++;
      }
      if (SB && an.Contains("Pos") && CDAIn) { // ...and vertex sidebands (pos-charge)
	counterPromptSBPPiMinusMuPlus++;
      }
      if (SB && an.Contains("Neg") && CDAIn) { // ...and vertex sidebands (neg-charge)
	counterPromptSBNPiMinusMuPlus++;
      }
      if (FV && an.Contains("Pos") && CDAIn) { // ...and in FV (pos-charge)
	counterPromptFVPPiMinusMuPlus++;
      } 
      if (FV && an.Contains("Neg") && CDAIn) { // ...and in FV (neg-charge)
	counterPromptFVNPiMinusMuPlus++;
      }
      if (FV && an.Contains("Pos") && CDAIn) { // ...and pos-charge evt in FV for inv mass distr
	hInvMassPromptSRPiMinusMuPlus->Fill(invMass/1000., Weight);		
      }
    }
  }

  // Mass hypothesis scan

  // Sigma vs mass (MC studies)
    
  if (MC && Zero) { 
    Int_t counter = 0;
    Double_t sigma = 0.;
    Double_t sigmaMin = 999.;
    hInvMassMCPiMinusMuPlus->Draw();
    Int_t firstBin = hInvMassMCPiMinusMuPlus->FindFirstBinAbove(0.,1);
    Double_t firstBinValue = hInvMassMCPiMinusMuPlus->GetBinCenter(firstBin)-hInvMassMCPiMinusMuPlus->GetBinWidth(firstBin)/2.;
    Int_t lastBin = hInvMassMCPiMinusMuPlus->FindLastBinAbove(0.,1);
    Double_t lastBinValue = hInvMassMCPiMinusMuPlus->GetBinCenter(lastBin)-hInvMassMCPiMinusMuPlus->GetBinWidth(lastBin)/2.;

    for (Double_t mass = firstBinValue+massStep; mass <= lastBinValue-massStep; mass += massStep) {
      TF1 *f1 = new TF1("f1", "gaus", mass-massStep, mass+massStep);
      hInvMassMCPiMinusMuPlus->Fit("f1", "Rq");
      sigma = f1->GetParameter(2);
      gMassMCPiMinusMuPlus->SetPoint(counter, mass, sigma);
      if (sigma < sigmaMin && sigma != 0.)
	sigmaMin = sigma;
      counter++;
    }

    minSigma = sigmaMin;
    gMassMCPiMinusMuPlus->Fit("pol5");
    TF1 *f = gMassMCPiMinusMuPlus->GetFunction("pol5");

    for (Int_t j = 0; j < 6; j++)
      Par[j] = f->GetParameter(j);
  }

  // Kolmogorov test and mass scan for data

  if (!MC) {   
    if (Zero) {
	
      // A - Combinatorial
	
      cout<<"Combinatorial bkg - Kolmogorov test for SR sample: "<<hInvMassCombSRPiMinusMuPlus->KolmogorovTest(hInvMassCombPiMinusMuPlus)<<" and enriched SR sample: "<<hInvMassCombSREnrichedPiMinusMuPlus->KolmogorovTest(hInvMassCombPiMinusMuPlus)<<endl;
      hInvMassCombKolmPiMinusMuPlus = (TH1D*)hInvMassCombPiMinusMuPlus->Clone();
      hInvMassCombKolmPiMinusMuPlus->SetName("hInvMassCombKolmPiMinusMuPlus");
      hInvMassCombKolmPiMinusMuPlus->Scale(hInvMassCombSRPiMinusMuPlus->Integral()/hInvMassCombKolmPiMinusMuPlus->Integral());
      gBkg1SigmaCombPiMinusMuPlus = WindowScanNoFixedSigma(hInvMassCombKolmPiMinusMuPlus, 1.);
      gBkg2SigmaCombPiMinusMuPlus = WindowScanNoFixedSigma(hInvMassCombKolmPiMinusMuPlus, 2.);
	
      // B - Parasitic
	
      cout<<"Parasitic bkg - Kolmogorov test for SR sample: "<<hInvMassParSRPiMinusMuPlus->KolmogorovTest(hInvMassParPiMinusMuPlus)<<endl;
      hInvMassParKolmPiMinusMuPlus = (TH1D*)hInvMassParPiMinusMuPlus->Clone();
      hInvMassParKolmPiMinusMuPlus->SetName("hInvMassParKolmPiMinusMuPlus");
      hInvMassParKolmPiMinusMuPlus->Scale(hInvMassParSRPiMinusMuPlus->Integral()/hInvMassParKolmPiMinusMuPlus->Integral());
      gBkg1SigmaParPiMinusMuPlus = WindowScanNoFixedSigma(hInvMassParKolmPiMinusMuPlus, 1.);
      gBkg2SigmaParPiMinusMuPlus = WindowScanNoFixedSigma(hInvMassParKolmPiMinusMuPlus, 2.);

      SumGraphs(gBkg1SigmaCombPiMinusMuPlus, gBkg1SigmaParPiMinusMuPlus, *gBkg1SigmaBufferPiMinusMuPlus);
      SumGraphs(gBkg2SigmaCombPiMinusMuPlus, gBkg2SigmaParPiMinusMuPlus, *gBkg2SigmaBufferPiMinusMuPlus);
    }
      
    if (an.Contains("Pos")) {

      // C - Prompt
	
      cout<<"Prompt bkg - Kolmogorov test for SR sample: "<<hInvMassPromptSRPiMinusMuPlus->KolmogorovTest(hInvMassPromptPiMinusMuPlus)<<endl;
      hInvMassPromptKolmPiMinusMuPlus = (TH1D*)hInvMassPromptPiMinusMuPlus->Clone();
      hInvMassPromptKolmPiMinusMuPlus->SetName("hInvMassPromptKolmPiMinusMuPlus");
      hInvMassPromptKolmPiMinusMuPlus->Scale(hInvMassPromptSRPiMinusMuPlus->Integral()/hInvMassPromptKolmPiMinusMuPlus->Integral());
      gBkg1SigmaPromptPiMinusMuPlus = WindowScanNoFixedSigma(hInvMassPromptKolmPiMinusMuPlus, 1.);
      gBkg2SigmaPromptPiMinusMuPlus = WindowScanNoFixedSigma(hInvMassPromptKolmPiMinusMuPlus, 2.);
	
      SumGraphs(gBkg1SigmaPromptPiMinusMuPlus, gBkg1SigmaBufferPiMinusMuPlus, *gBkg1SigmaTotPiMinusMuPlus);
      SumGraphs(gBkg2SigmaPromptPiMinusMuPlus, gBkg2SigmaBufferPiMinusMuPlus, *gBkg2SigmaTotPiMinusMuPlus);
      
      for (Int_t j = 0; j < 6; j++)
	Par[j] = 0.;
      
      minSigma = 0.;
    }
  }
  
  // Saving histograms
  
  Save(path + "PiMinusMuPlus/SR/", c, hDistSRPiMinusMuPlus, "Vertex-beamline distance [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/SR/", c, hTimeSRPiMinusMuPlus, "Track time difference [ns]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/SR/", c, hZSRPiMinusMuPlus, "Z coordinate of vertex [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/SR/", c, hInvMassSRPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/SR/", c, hMomPiSRPiMinusMuPlus, "Pion momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/SR/", c, hMomMuSRPiMinusMuPlus, "Muon momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/SR/", c, hDistvsMassSRPiMinusMuPlus, "Reconstructed HNL mass", "Vertex-beamline distance [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/SR/", c, hSRSRPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);

  Save(path + "PiMinusMuPlus/Comb/", c, hTimeCombPiMinusMuPlus, "Track time difference [ns]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hInvMassCombPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hInvMassCombExtra3PiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hInvMassCombKolmPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hInvMassCombSRPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hInvMassCombSREnrichedPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hMomPiNegCombPiMinusMuPlus, "Pion momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hMomMuPosCombPiMinusMuPlus, "Muon momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hGTK3IDPiNegCombPiMinusMuPlus, "RICH hypothesis", "RICH radius [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hGTK3IDMuPosCombPiMinusMuPlus, "RICH hypothesis", "RICH radius [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hGTK3XYPiNegCombPiMinusMuPlus, "X at GTK3 [mm]", "Y at GTK3 [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hGTK3XYMuPosCombPiMinusMuPlus, "X at GTK3 [mm]", "Y at GTK3 [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hSRCombPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hSRFinalCombPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, hSRFinalCombEnrichedPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, gBkg1SigmaCombPiMinusMuPlus, "gBkg1SigmaComb", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Comb/", c, gBkg2SigmaCombPiMinusMuPlus, "gBkg2SigmaComb", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);
  
  Save(path + "PiMinusMuPlus/Prompt/", c, hZPromptPiMinusMuPlus, "Z coordinate of vertex [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hZPromptPPiMinusMuPlus, "Z coordinate of vertex [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hZPromptNPiMinusMuPlus, "Z coordinate of vertex [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hInvMassPromptPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hInvMassPromptSRPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hInvMassPromptKolmPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hMomPiPromptPiMinusMuPlus, "Pion momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hMomMuPromptPiMinusMuPlus, "Muon momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hZTimePromptPiMinusMuPlus, "Z coordinate of vertex [m]", "Track time difference [ns]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hZTimePromptPPiMinusMuPlus, "Z coordinate of vertex [m]", "Track time difference [ns]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hZTimePromptNPiMinusMuPlus, "Z coordinate of vertex [m]", "Track time difference [ns]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hSRPromptPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, hSRFinalPromptPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, gBkg1SigmaPromptPiMinusMuPlus, "gBkg1SigmaPrompt", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Prompt/", c, gBkg2SigmaPromptPiMinusMuPlus, "gBkg2SigmaPrompt", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);

  Save(path + "PiMinusMuPlus/Par/", c, hDistParPiMinusMuPlus, "Vertex-beamline distance [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hInvMassParPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hInvMassParSRPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hInvMassParKolmPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hMomPiParPiMinusMuPlus, "Pion momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hMomMuParPiMinusMuPlus, "Muon momentum [GeV/c]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hDistvsMassParPiMinusMuPlus, "Reconstructed HNL mass", "Vertex-beamline distance [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hDistvsMassParSRPiMinusMuPlus, "Reconstructed HNL mass", "Vertex-beamline distance [mm]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hSRParPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, hSRFinalParPiMinusMuPlus, "Z of CDA of mother wrt target-TAX line [m]", "CDA of mother wrt target-TAX line [m]", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, gBkg1SigmaParPiMinusMuPlus, "gBkg1SigmaPar", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);
  Save(path + "PiMinusMuPlus/Par/", c, gBkg2SigmaParPiMinusMuPlus, "gBkg2SigmaPar", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);

  if (!an.Contains("Pos") && !an.Contains("Neg") && !histo1.Contains("2016") && !histo1.Contains("2017") && !histo1.Contains("2018") && !histo1.Contains("Data")) {
    Save(path + "PiMinusMuPlus/MC/", c, hInvMassMCPiMinusMuPlus, "Reconstructed invariant mass [GeV/c^{2}]", labelSize, titleSize);
    Save(path + "PiMinusMuPlus/MC/", c, gMassMCPiMinusMuPlus, "gMassMC", "Reconstructed invariant mass [GeV/c^{2}]", "Sigma [GeV/c^{2}]", labelSize, titleSize);
  }

  tree->ResetBranchAddresses();
    
  return;
}

void BkgPiMinusMuPlus(TString dir, TString histo1, TString histo2) {

  // dir = output dir, histo1 = Data, histo2 = MC

  gErrorIgnoreLevel = kFatal;

  // Counters for pos/neg/zero charge studies
  
  TCanvas *c = new TCanvas();  
  Double_t labelSize = 0.05;
  Double_t titleSize = 0.07;  
  Double_t counterCombPiMinusMuPlus = 0;
  Double_t counterParPiMinusMuPlus = 0;
  Double_t counterPromptSBZPiMinusMuPlus = 0;
  Double_t counterPromptFVZPiMinusMuPlus = 0;
  Double_t counterPromptSBPPiMinusMuPlus = 0;
  Double_t counterPromptFVPPiMinusMuPlus = 0;
  Double_t counterPromptSBNPiMinusMuPlus = 0;
  Double_t counterPromptFVNPiMinusMuPlus = 0;
  Double_t PPiMinusMuPlus = 0.;
  Double_t NPiMinusMuPlus = 0.;
  TString pathPiMinusMuPlus = "/home/li/cernbox/PhD/TalksAndPapers/Notes/MCnote/images/Plots/Data/All/Zero/PiMinusMuPlus/";

  // Total expected bkg
  
  TGraph *gBkg1SigmaBufferPiMinusMuPlus = new TGraph();
  gBkg1SigmaBufferPiMinusMuPlus->SetNameTitle("gBkg1SigmaBuffer", "Total expected background");
  TGraph *gBkg2SigmaBufferPiMinusMuPlus = new TGraph();
  gBkg2SigmaBufferPiMinusMuPlus->SetNameTitle("gBkg2SigmaBuffer", "Total expected background");
  TGraph *gBkg1SigmaTotPiMinusMuPlus = new TGraph();
  gBkg1SigmaTotPiMinusMuPlus->SetNameTitle("gBkg1SigmaTot", "Total expected background");
  TGraph *gBkg2SigmaTotPiMinusMuPlus = new TGraph();
  gBkg2SigmaTotPiMinusMuPlus->SetNameTitle("gBkg2SigmaTot", "Total expected background");

  c->SetRightMargin(0.2);
  c->SetLeftMargin(0.2);
  c->SetBottomMargin(0.25);
  c->SetTopMargin(0.15);
  c->SetGrid();
  c->RedrawAxis();

  Analyzer(dir, histo2, "HeavyNeutrino", c, counterCombPiMinusMuPlus, counterParPiMinusMuPlus, counterPromptSBZPiMinusMuPlus, counterPromptFVZPiMinusMuPlus, counterPromptSBPPiMinusMuPlus, counterPromptFVPPiMinusMuPlus, counterPromptSBNPiMinusMuPlus, counterPromptFVNPiMinusMuPlus, gBkg1SigmaBufferPiMinusMuPlus, gBkg2SigmaBufferPiMinusMuPlus, gBkg1SigmaTotPiMinusMuPlus, gBkg2SigmaTotPiMinusMuPlus);
  Analyzer(dir, histo1, "HeavyNeutrino", c, counterCombPiMinusMuPlus, counterParPiMinusMuPlus, counterPromptSBZPiMinusMuPlus, counterPromptFVZPiMinusMuPlus, counterPromptSBPPiMinusMuPlus, counterPromptFVPPiMinusMuPlus, counterPromptSBNPiMinusMuPlus, counterPromptFVNPiMinusMuPlus, gBkg1SigmaBufferPiMinusMuPlus, gBkg2SigmaBufferPiMinusMuPlus, gBkg1SigmaTotPiMinusMuPlus, gBkg2SigmaTotPiMinusMuPlus);
  Analyzer(dir, histo1, "HeavyNeutrinoPos", c, counterCombPiMinusMuPlus, counterParPiMinusMuPlus, counterPromptSBZPiMinusMuPlus, counterPromptFVZPiMinusMuPlus, counterPromptSBPPiMinusMuPlus, counterPromptFVPPiMinusMuPlus, counterPromptSBNPiMinusMuPlus, counterPromptFVNPiMinusMuPlus, gBkg1SigmaBufferPiMinusMuPlus, gBkg2SigmaBufferPiMinusMuPlus, gBkg1SigmaTotPiMinusMuPlus, gBkg2SigmaTotPiMinusMuPlus);
  Analyzer(dir, histo1, "HeavyNeutrinoNeg", c, counterCombPiMinusMuPlus, counterParPiMinusMuPlus, counterPromptSBZPiMinusMuPlus, counterPromptFVZPiMinusMuPlus, counterPromptSBPPiMinusMuPlus, counterPromptFVPPiMinusMuPlus, counterPromptSBNPiMinusMuPlus, counterPromptFVNPiMinusMuPlus, gBkg1SigmaBufferPiMinusMuPlus, gBkg2SigmaBufferPiMinusMuPlus, gBkg1SigmaTotPiMinusMuPlus, gBkg2SigmaTotPiMinusMuPlus);
  
  Save(pathPiMinusMuPlus + "Total/", c, gBkg1SigmaTotPiMinusMuPlus, "gBkg1SigmaTot", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);
  Save(pathPiMinusMuPlus + "Total/", c, gBkg2SigmaTotPiMinusMuPlus, "gBkg2SigmaTot", "N mass [GeV/c^{2}]", "N_{exp}", labelSize, titleSize);
    
  if (counterPromptSBPPiMinusMuPlus != 0.)
    PPiMinusMuPlus = counterPromptFVPPiMinusMuPlus*counterPromptSBZPiMinusMuPlus/counterPromptSBPPiMinusMuPlus;
  if (counterPromptSBNPiMinusMuPlus != 0.)
    NPiMinusMuPlus = counterPromptFVNPiMinusMuPlus*counterPromptSBZPiMinusMuPlus/counterPromptSBNPiMinusMuPlus;
  
  counterPromptFVZPiMinusMuPlus = PPiMinusMuPlus+NPiMinusMuPlus;
  
  cout<<"PI-MU+: Number of events in SR and time sidebands: "<<counterCombPiMinusMuPlus<<", and beamdist sidebands: "<<counterParPiMinusMuPlus<<", and Z sidebands (0-charge): "<<counterPromptSBZPiMinusMuPlus<<", and Z sidebands (pos-charge): "<<counterPromptSBPPiMinusMuPlus<<", and Z sidebands (neg-charge): "<<counterPromptSBNPiMinusMuPlus<<", and FV (pos-charge): "<<counterPromptFVPPiMinusMuPlus<<", and FV (neg-charge): "<<counterPromptFVNPiMinusMuPlus<<", and FV (0-charge): "<<counterPromptFVZPiMinusMuPlus<<endl;

  _exit(0);
}
